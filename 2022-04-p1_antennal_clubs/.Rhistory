col_sums <- colSums(gene_count_per_nuclei[, -1])
col_sums <- mapply(sum, or_per_nucleus[, 2:34669])
col_sums <- mapply(sum, or_per_nucleus[, -1])
a <- c(1, 2, 3, 4, 10)
colSums(a)
b <- c(3, 4, 6)
ab <- data.frame(a, b)
b <- c(3, 4, 6, 7, 10)
ab <- data.frame(a, b)
ab
colSums(ab)
c <- c("a", "b", "c", "d", "e")
a <- c(1, 2, 0, 0, 10)
b <- c(3, 0, 0, 7, 10)
abc <- data.frame(c, a, b)
abc
colSums(abc[, -1])
col_sums <- colSums(or_per_nucleus[, -1])
head(or_per_nucleus[, -1])
col_sums <- colSums(or_per_nucleus[, 2:34669])
colSums(or_per_nucleus[, 2])
colSums(or_per_nucleus[, 2, drop = FALSE])
col_sums <- colSums(or_per_nucleus[, 2:34669, drop = FALSE])
col_sums <- colSums(or_per_nucleus[, -1, drop = FALSE])
or_per_nucleus_subset <- data.frame(or_per_nucleus[2:34669] > 2)
test <- or_per_nucleus[2] >= 2
head(test)
col_sums <- colSums(or_per_nucleus)
col_sums <- colSums(or_per_nucleus[, 2:4])
col_sums
col_sums <- colSums(or_per_nucleus[, 2:10])
col_sums
hist(col_sums)
col_sums <- colSums(or_per_nucleus[, 2:100])
hist(col_sums)
col_sums <- colSums(or_per_nucleus[, 2:1000])
hist(col_sums)
col_sums <- colSums(or_per_nucleus[, 2:10])
col_sums <- colSums(or_per_nucleus[, 40:60])
hist(col_sums)
col_sums <- colSums(or_per_nucleus[, 2:10])
hist(col_sums)
hist(col_sums)
col_sums <- colSums(or_per_nucleus[, 2:10000])
hist(col_sums)
a <- c(0, 2, NA, 3, NA)
a <- c(0, 2, NA, 3, NA, 1)
b <- c(0, 0, NA, NA, 2, 3)
ab <- c(a, b)
ab
ab <- data.frame(a, b)
ab
colSums(ab)
nrow(ab[ab$a >= 2,])
nrow(ab[ab$a > 2, ])
a
length(ab[ab$a > 2, ])
length(ab[ab > 2, ])
length(ab[ab > 2, ])
a <- c(0, 2, 0, 3, 0, 4)
b <- c(0, 0, 0, 0, 2, 3)
ab <- data.frame(a, b)
apply(ab, 2, function(x) sum(x > 1))
ab
ab <- data.frame(rbind(a, b))
ab
ab
c <- c(1, 0, 1, 0, 5, 0)
abc <- data.frame(rbind(a, b, c))
colnames(abc) <- c("g1", "g2", "g3", "g4", "g5")
abc
colnames(abc) <- c("g1", "g2", "g3", "g4", "g5", "g6")
abc
table(abc[1, ] > 2)
table(abc[2, ] > 2)
res <- table(abc[2, ] > 2)
res
res$TRUE
res <- data.frame(table(abc[2, ] > 2))
res
res
res$Freq
res <- data.frame(table(abc[1:3, ] > 2))
res
names_vec <- c("a", "b", "c")
res <- as.data.frame(matrix(ncol = 2),
nrow = length(names_vec))
colnames(res) <- c("false", "true")
res <- as.data.frame(matrix(ncol = 3),
nrow = length(names_vec))
colnames(res) <- c("name", "false", "true")
res$name <- names_vec
names_vec <- data.frame(c("a", "b", "c"))
names_vec
colnames(names_vec) <- "name"
names_vec
res <- as.data.frame(matrix(ncol = 3),
nrow = length(names_vec))
colnames(res) <- c("name", "false", "true")
res$name <- names_vec$name
length(names_vec)
res <- as.data.frame(matrix(ncol = 3),
nrow = length(names_vec$name))
colnames(res) <- c("name", "false", "true")
res$name <- names_vec$name
length(names_vec$name)
res
res <- as.data.frame(matrix(ncol = 3),
nrow = length(names_vec$name))
res
length(names_vec$name)
names <- data.frame(c("a", "b", "c"))
colnames(names) <- "name"
names_vec <- unique(names$name)
length(names_vec)
res <- as.data.frame(matrix(ncol = 3),
nrow = length(names_vec))
colnames(res) <- c("name", "false", "true")
res$name <- names_vec
res
res <- as.data.frame(matrix(ncol = 3,
res <- as.data.frame(matrix(ncol = 3,
nrow = length(names_vec)))
qq
res <- as.data.frame(matrix(ncol = 3,
nrow = length(names_vec)))
colnames(res) <- c("name", "false", "true")
res$name <- names_vec
res
position <- 1
position
print(position)
table(abc[position, ] > 2)
data.frame(table(abc[position, ] > 2))
table[position] <- data.frame(table(abc[position, ] > 2))
table <- data.frame(table(abc[position, ] > 2))
table
table_transpose <- t(table)
table_transpose
colnames(table_transpose) <- c("false", "true")
table_transpose
table_transpose <- table_transpose[-1, ]
table_transpose
table_transpose$false
table_transpose <- t(table)
table_transpose <- data.frame(t(table))
table_transpose
colnames(table_transpose) <- c("false", "true")
table_transpose
table_transpose <- table_transpose[-1, ]
table_transpose
res$false[position] <- table_transpose$false
res$true[position] <- table_transpose$true
res
return(res)
for position in seq_len(length(names_vec)) {
for (position in seq_len(length(names_vec))) {
print(position)
table <- data.frame(table(abc[position, ] > 2))
table_transpose <- data.frame(t(table))
colnames(table_transpose) <- c("false", "true")
table_transpose <- table_transpose[-1, ]
res$false[position] <- table_transpose$false
res$true[position] <- table_transpose$true
return(res)
}
res
names_vec
length(names_vec)
seq_len(length(names_vec)))
seq_len(length(names_vec))
position <- 2
table <- data.frame(table(abc[position, ] > 2))
table_transpose <- data.frame(t(table))
colnames(table_transpose) <- c("false", "true")
table_transpose
for (position in seq_len(length(names_vec))) {
print(position)
table <- data.frame(table(abc[position, ] > 2))
table_transpose <- data.frame(t(table))
colnames(table_transpose) <- c("false", "true")
table_transpose <- table_transpose[-1, ]
res$false[position] <- table_transpose$false
res$true[position] <- table_transpose$true
return(res)
}
res
position <- 2
print(position)
table <- data.frame(table(abc[position, ] > 2))
table_transpose <- data.frame(t(table))
colnames(table_transpose) <- c("false", "true")
table_transpose <- table_transpose[-1, ]
res$false[position] <- table_transpose$false
res$true[position] <- table_transpose$true
res
res$true[position] <- table_transpose$true
for (position in seq_len(length(names_vec))) {
print(position)
table <- data.frame(table(abc[position, ] > 2))
table_transpose <- data.frame(t(table))
colnames(table_transpose) <- c("false", "true")
table_transpose <- table_transpose[-1, ]
res$false[position] <- table_transpose$false
res$true[position] <- table_transpose$true
}
res
names
abc
or_per_nucleus_t <- t(or_per_nucleus)
or_per_nucleus_t <- data.frame(t(or_per_nucleus))
View(or_per_nucleus_t)
or_per_nucleus_t <- data.frame(t(or_per_nucleus[, -1]))
colnames(or_per_nucleus_t) <- or_per_nucleus$gene_id
##create a vector with unique gene ids (there shouldn't be duplication though)
gene_id_vec <- unique(or_per_nucleus$gene_id)
#create empty dataframe
result_df <- as.data.frame(matrix(ncol = 3,
nrow = length(gene_id_vec)))
colnames(result_df) <- c("gene_id", "false", "true")
result_df$gene_id <- gene_id_vec
head(result_df)
rm(gene_id_vec)
nuclei_barcodes <- rownames(or_per_nucleus_t)
rownames(or_per_nucleus_t) <- NULL
or_per_nucleus_t$nuclei_barcodes <- nuclei_barcodes
head(or_per_nucleus_t$nuclei_barcodes)
str(or_per_nucleus_t$nuclei_barcodes)
or_per_nucleus_t$nuclei_barcodes <- as.factor(nuclei_barcodes)
str(or_per_nucleus_t$nuclei_barcodes)
##create a vector with unique nucleus barcodes (there shouldn't be duplication though)
nuclei_barcode_vec <- unique(or_per_nucleus_t$nuclei_barcodes)
#create empty dataframe
result_df <- as.data.frame(matrix(ncol = 3,
nrow = length(nuclei_barcode_vec)))
colnames(result_df) <- c("nucleus_barcode", "false", "true")
result_df$nucleus_barcode <- nuclei_barcode_vec
head(result_df)
for (position in seq_len(length(nuclei_barcode_vec))) {
print[position]
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
table_t <- data.frame(t(table))
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
}
length(nuclei_barcode_vec)
seq_len(length(nuclei_barcode_vec))
position <- 1
print[position]
for (position in seq_len(length(nuclei_barcode_vec))) {
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
table_t <- data.frame(t(table))
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
}
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
table_t <- data.frame(t(table))
table_t
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
table_t
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
table_t <- data.frame(t(table))
colnames(table_t) <- c("false", "true")
# colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
table_t
table
for (position in seq_len(length(nuclei_barcode_vec))) {
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
}
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table <- data.frame(table(or_per_nucleus_t[position, ] > 0))
position <- 1
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
table_t
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
head(result_df)
##calculate number of ORs per nuclei with count > 2
#transpose the data such that gene ids are now the columns
or_per_nucleus_t <- data.frame(t(or_per_nucleus[, -1]))
View(or_per_nucleus_t)
colnames(or_per_nucleus_t) <- or_per_nucleus$gene_id
nuclei_barcodes <- rownames(or_per_nucleus_t)
rownames(or_per_nucleus_t) <- NULL
or_per_nucleus_t$nuclei_barcodes <- as.factor(nuclei_barcodes)
##create a vector with unique nucleus barcodes (there shouldn't be duplication though)
nuclei_barcode_vec <- unique(or_per_nucleus_t$nuclei_barcodes)
head(nuclei_barcode_vec)
#create empty dataframe
result_df <- as.data.frame(matrix(ncol = 3,
nrow = length(nuclei_barcode_vec)))
colnames(result_df) <- c("nucleus_barcode", "false", "true")
result_df$nucleus_barcode <- nuclei_barcode_vec
head(result_df)
position <- 1
print(position)
or_per_nucleus_t[position, ]
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
abc
##calculate number of ORs per nuclei with count > 2
#transpose the data such that gene ids are now the columns
or_per_nucleus_t <- data.frame(t(or_per_nucleus[, -1]))
colnames(or_per_nucleus_t) <- or_per_nucleus$gene_id
nuclei_barcodes <- rownames(or_per_nucleus_t)
rownames(or_per_nucleus_t) <- NULL
##create a vector with unique nucleus barcodes (there shouldn't be duplication though)
nuclei_barcode_vec <- unique(nuclei_barcodes)
length(nuclei_barcode_vec)
#create empty dataframe
result_df <- as.data.frame(matrix(ncol = 3,
nrow = length(nuclei_barcode_vec)))
colnames(result_df) <- c("nucleus_barcode", "false", "true")
result_df$nucleus_barcode <- nuclei_barcode_vec
head(result_df)
position <- 1
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 2))
table_t <- data.frame(t(table))
table_t
colnames(table_t) <- c("false", "true")
table_t$t.table.
# colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
table_t
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
table_t
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
position <- 3
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
table_t
table_t$t.table.
row.names(table_t)
colnames(table_t)
position <- 1
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
colnames(table_t)
table_t
for (position in seq_len(length(nuclei_barcode_vec))) {
print(position)
table <- data.frame(table(or_per_nucleus_t[position, ] > 1))
table_t <- data.frame(t(table))
if (colnames(table_t) == "t.table.") {
result_df$false[position] <- 563
result_df$true[position] <- 0
}
if (colnames(table_t)[1] == "X1") {
colnames(table_t) <- c("false", "true")
table_t <- table_t[-1, ]
result_df$false[position] <- table_t$false
result_df$true[position] <- table_t$true
}
}
View(result_df)
##save table
write.table(x = result_df, file = "results/or_per_nucleus.csv",
sep = ",", quote = FALSE, header = TRUE)
##save table
write.table(x = result_df, file = "results/or_per_nucleus.csv",
sep = ",", quote = FALSE)
#save table
write.table(x = result_df, file = "results/or_per_nucleus.csv",
sep = ",", quote = FALSE, row.names = FALSE,
header = TRUE)
#save table
write.table(x = result_df, file = "results/or_per_nucleus.csv",
sep = ",", quote = FALSE, row.names = FALSE)
only_one_or <- subset(x = result_df, subset = true == 1)
View(only_one_or)
rownames(result_df) <- NULL
head(result_df$true)
str(result_df)
result_df_copy <- gsub(pattern = " ", replacement = "",
x = result_df)
result_df_copy <- data.frame(gsub(pattern = " ", replacement = "",
x = result_df))
View(result_df_copy)
rm(result_df_copy)
result_df_copy <- data.frame(gsub(pattern = " ", replacement = "",
x = result_df$true))
View(result_df_copy)
View(result_df)
colnames(result_df_copy) <- "true_or"
str(result_df_copy$true_or)
result_df_copy$true_or <- as.factor(result_df_copy$true_or)
str(result_df_copy$true_or)
#add this into the original result_df dataframe
result_df$true_or <- result_df_copy$true_or
##subset the nuclei for which there is 1 OR with read count > 1
only_one_or <- subset(x = result_df, subset = true_or == 1)
View(only_one_or)
##subset the nuclei for which there are more than 1 ORs with read count > 1
more_than_one_or <- subset(x = result_df, subset = true_or > 1)
#change from character to numeric
result_df_copy$true_or <- as.numeric(result_df_copy$true_or)
#add this into the original result_df dataframe
result_df$true_or <- result_df_copy$true_or
##subset the nuclei for which there is 1 OR with read count > 1
only_one_or <- subset(x = result_df, subset = true_or == 1)
##subset the nuclei for which there are more than 1 ORs with read count > 1
more_than_one_or <- subset(x = result_df, subset = true_or > 1)
View(more_than_one_or)
#add this into the original result_df dataframe
result_df$true_or <- gsub(pattern = " ", replacement = "", x = result_df$true)
str(result_df)
result_df$true_or <- as.numeric(result_df$true_or)
##subset the nuclei for which there is 1 OR with read count > 1
only_one_or <- subset(x = result_df, subset = true_or == 1)
View(only_one_or)
##subset the nuclei for which there are more than 1 ORs with read count > 1
more_than_one_or <- subset(x = result_df, subset = true_or > 1)
View(more_than_one_or)
#subset the nuclei for which there are more than 2 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or > 2)
#subset the nuclei for which there are more than 2 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or > 2 & < 4) #11525
#subset the nuclei for which there are more than 2 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or > 2 |
true_or < 4) #11525
View(more_than_two_ors)
#subset the nuclei for which there are more than 2 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or > 2 &
true_or < 4) #11525
View(more_than_two_ors)
#subset for more than 4 ORs
more_than_four_ors <- more_than_one_or <- subset(x = result_df, subset = true_or > 4)
9764+16473+2991+6451
#subset for nuclei with no ORs with read count > 1
no_or <- subset(x = result_df, subset = true_or == 0)
9764+16473+8341
#subset the nuclei for which there are more than 2 and less than 4 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or >= 2 &
true_or < 4) #2991
#make a freq distribution
categories <- c("no_OR", "only_1_OR", "two_or_more_ORs", "more_than_four_ORs")
#subset the nuclei for which there are more than 2 and less than 4 ORs with read count > 1
more_than_two_ors <- subset(x = result_df, subset = true_or >= 2 &
true_or < 4) #2991
values <- c(8341, 9764, 7939, 6451)
hist_df <- data.frame(categories, values)
View(hist_df)
hist(hist_df)
hist(hist_df$values)
hist_df_t <- data.frame(t(hist_df))
hist(hist_df_t)
hist(hist_df$values, hist_df$categories)
plot(hist_df$values, hist_df$categories)
plot(hist_df$values ~ hist_df$categories)
plot(hist_df$categories ~ hist_df$values)
plot(hist_df)
barplot(hist_df)
hist_df <- as.matrix(categories, values)
barplot(hist_df)
barplot(hist_df)
hist_df <- data.frame(categories, values)
hist_df_t <- data.frame(t(hist_df))
barplot(hist_df)
ggplot(data = hist_df, mapping = aes(x = categories, y = values)) +
barplot()
ggplot(data = hist_df, mapping = aes(x = categories, y = values)) +
boxplot()
ggplot(data = hist_df, mapping = aes(x = categories, y = values))
ggplot(data = hist_df, mapping = aes(x = categories, y = values)) +
barplot(height = values)
barplot(hist_df$values)
barplot(hist_df$values)
barplot(hist_df$values,
xlab = c("no_OR", "only_1_OR", "two_or_more_ORs", "more_than_four_ORs"))
barplot(hist_df$values,
xlab = c("no_OR", "only_1_OR", "two_or_more_ORs", "more_than_four_ORs"))
barplot(hist_df$values, xlim = c(0, 10000))
barplot(hist_df$values)
barplot(hist_df$values)
DimHeatmap(p1_normalize_neuron_ids, dims = 1:10, cells = 500, balanced = TRUE)
DimHeatmap(p1_normalize_neuron_ids, dims = 1:15, cells = 500, balanced = TRUE)
DimHeatmap(p1_normalize_neuron_ids, dims = 1:15, cells = 500, balanced = TRUE)
#cluster markers
#find markers
#cluster 1
cluster1_markers <- FindMarkers(object = p1_normalize_neuron_ids, ident.1 = 1,
min.pct = 0.25)
head(cluster1_markers, n = 10)
